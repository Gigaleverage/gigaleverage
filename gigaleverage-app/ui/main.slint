import { Button, LineEdit, ScrollView, VerticalBox, HorizontalBox, GroupBox } from "std-widgets.slint";
// Import custom fonts (Plus Jakarta Sans family)
import "../assets/fonts/PlusJakartaSans-Regular.ttf";
import "../assets/fonts/PlusJakartaSans-Medium.ttf";
import "../assets/fonts/PlusJakartaSans-SemiBold.ttf";
import "../assets/fonts/PlusJakartaSans-Bold.ttf";

export global Theme {
    in-out property <color> background: #0f0f0f;
    in-out property <color> primary: #61dafb;
    in-out property <color> accent: #8ce99a; // light green
    in-out property <color> accent-hover: #69db7c;
    in-out property <color> text-primary: #ffffff;
    in-out property <color> text-secondary: #b0b0b0;
    in-out property <color> surface: #1a1a1a;
    in-out property <color> surface-hover: #2a2a2a;
    in-out property <color> danger: #ff6b6b;
    in-out property <color> warning: #ffd43b;
    // Added for modern white-ish controls
    in-out property <color> button-background: #ffffff;
    in-out property <color> button-background-hover: #e8e8e8;
    in-out property <color> button-text: #0f0f0f;
    // Unified corner radius for buttons & inputs
    in-out property <length> control-radius: 10px;
}

export struct Provider {
    id: string,
    name: string,
    logo: image,
}

export struct DataStream {
    id: string,
    name: string,
}

export struct Leverage {
    id: string,
    provider: Provider,
    data_stream: DataStream,
}

export enum Screen {
    Loading,
    ApiKeySetup,
    Intro,
    Main,
    Settings,
}

// Sleek, rounded primary button used across the UI
export component RoundedButton inherits Rectangle {
    in property <string> text;
    in property <bool> enabled: true;

    height: 48px;
    border-radius: Theme.control-radius;
    background: enabled ? Theme.button-background : Theme.surface-hover;
    opacity: enabled ? 1.0 : 0.5;

    ta := TouchArea {
        mouse-cursor: pointer;
        clicked => {
            if enabled {
                clicked();
            }
        }
    }

    // Hover / press feedback
    states [
        hover when ta.has-hover && enabled: {
            background: Theme.button-background-hover;
        }
        pressed when ta.pressed && enabled: {
            background: Theme.accent;
        }
    ]

    animate background {
        duration: 150ms;
        easing: ease-in-out;
    }

    Text {
        text: parent.text;
        color: Theme.button-text;
        font-weight: 600;
        horizontal-alignment: center;
        vertical-alignment: center;
    }

    callback clicked();
}

// Rounded input field with extra padding
export component RoundedLineEdit inherits Rectangle {
    in-out property <string> text: "";
    in property <string> placeholder: "";

    // Forward the underlying LineEdit edited() callback so callers can react
    callback edited(string);

    height: 40px;
    border-radius: Theme.control-radius;
    background: Theme.surface-hover;
    border-width: 1px;
    border-color: le.has-focus ? Theme.primary : Theme.surface-hover;

    animate border-color {
        duration: 150ms;
        easing: ease-in-out;
    }

    // Internal text field
    le := LineEdit {
        x: 10px;
        y: 0px;
        width: parent.width - 20px;
        height: parent.height;
        placeholder-text: parent.placeholder;
        font-size: 14px;
        text <=> parent.text;
        edited => {
            parent.edited(self.text);
        }
    }
}

export component LoadingScreen inherits Rectangle {
    background: Theme.background;
    property <float> pulse-scale: 1.0;
    
    // Pulse animation
    animate pulse-scale {
        duration: 1.5s;
        easing: ease-in-out;
        iteration-count: -1;
    }
    VerticalBox {
        alignment: center;
        HorizontalBox {
            alignment: center;

            VerticalBox {
                alignment: center;
                spacing: 40px;
                Rectangle {
                    width: 200px;
                    height: 200px;
                    Image {
                        source: @image-url("../assets/images/giga-logo-icon.svg");
                        width: 100%;
                        height: 100%;
                        image-fit: contain;
                        
                        // Apply pulse animation
                        animate opacity {
                            duration: 1.5s;
                            easing: ease-in-out;
                            iteration-count: -1;
                        }
                    }
                }

                VerticalBox {
                    spacing: 16px;
                    Text {
                        text: "Gigaleverage";
                        font-size: 28px;
                        font-weight: 700;
                        color: Theme.text-primary;
                        horizontal-alignment: center;
                    }

                    Text {
                        text: "‚ö° Loading...";
                        font-size: 14px;
                        color: Theme.primary;
                        horizontal-alignment: center;
                        animate opacity {
                            duration: 1s;
                            easing: ease-in-out;
                            iteration-count: -1;
                        }
                    }
                }
            }
        }
    }
}

export component ApiKeyInput inherits Rectangle {
    callback api-keys-submitted(string, string);
    property <string> openai-api-key;
    property <string> coingecko-api-key;
    background: Theme.background;
    HorizontalBox {
        alignment: center;
        VerticalBox {
            max-width: 550px;
            padding: 32px;
            spacing: 8px;

            // Header
            Text {
                text: "üîë Welcome to Gigaleverage";
                font-size: 28px;
                font-weight: 600;
                color: Theme.text-primary;
                horizontal-alignment: center;
            }

            // Sub-header
            Text {
                text: "Enter your API keys to get started";
                font-size: 16px;
                color: Theme.text-secondary;
                horizontal-alignment: center;
            }

            // Spacer between header and form fields
            Rectangle {
                height: 16px;
            }

            // OpenAI Key Field
            HorizontalBox {
                spacing: 8px;
                Image {
                    source: @image-url("../assets/images/openai-logo.png");
                    width: 24px;
                    height: 24px;
                    image-fit: contain;
                }

                Text {
                    text: "OpenAI API Key";
                    font-size: 14px;
                    color: Theme.text-secondary;
                    vertical-alignment: center;
                }
            }

            RoundedLineEdit {
                placeholder: "SK-...";
                text <=> openai-api-key;
            }

            Text {
                text: "Get key at https://platform.openai.com/account/api-keys ‚Üí Create new secret key";
                font-size: 12px;
                wrap: word-wrap;
                color: Theme.text-secondary;
            }

            // Spacer between form fields
            Rectangle {
                height: 16px;
            }

            // CoinGecko Key Field
            HorizontalBox {
                spacing: 8px;
                Image {
                    source: @image-url("../assets/images/coingecko-logo.png");
                    width: 24px;
                    height: 24px;
                    image-fit: contain;
                }

                Text {
                    text: "CoinGecko API Key";
                    font-size: 14px;
                    color: Theme.text-secondary;
                    vertical-alignment: center;
                }
            }

            RoundedLineEdit {
                placeholder: "‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢";
                text <=> coingecko-api-key;
            }

            Text {
                text: "Generate key: log in at https://www.coingecko.com ‚Üí API ‚Üí Generate Key";
                font-size: 12px;
                wrap: word-wrap;
                color: Theme.text-secondary;
            }

            // Spacer before action buttons
            Rectangle {
                min-height: 24px;
            }
            
            // Action buttons
            HorizontalBox {
                spacing: 24px;
                alignment: center;

                RoundedButton {
                    text: "‚è≠Ô∏è Skip for now";
                    min-width: 150px;
                    clicked => {
                        api-keys-submitted("", "");
                    }
                }

                RoundedButton {
                    text: "‚úÖ Continue";
                    min-width: 150px;
                    clicked => {
                        api-keys-submitted(openai-api-key, coingecko-api-key);
                    }
                }
            }
        }
    }
}

export component IntroScreen inherits Rectangle {
    callback continue-clicked();
    background: Theme.background;
    VerticalBox {
        padding: 32px;
        spacing: 32px;
        Text {
            text: "üöÄ Welcome to Gigaleverage";
            font-size: 32px;
            font-weight: 700;
            color: Theme.text-primary;
            horizontal-alignment: center;
        }

        ScrollView {
            VerticalBox {
                spacing: 24px;
                GroupBox {
                    title: "üîç Time Series Analysis";
                    Text {
                        text: "Ingest and analyze time series data including prices, weather, and telemetry data to understand patterns and trends.";
                        font-size: 14px;
                        color: Theme.text-secondary;
                        wrap: word-wrap;
                    }
                }

                GroupBox {
                    title: "üí≠ Sentiment Analysis";
                    Text {
                        text: "Analyze sentiment in time series data to predict future values and market movements with AI-powered insights.";
                        font-size: 14px;
                        color: Theme.text-secondary;
                        wrap: word-wrap;
                    }
                }

                GroupBox {
                    title: "üöÄ Prediction Engine";
                    Text {
                        text: "Leverage advanced machine learning models to predict the next value in your time series data with high accuracy.";
                        font-size: 14px;
                        color: Theme.text-secondary;
                        wrap: word-wrap;
                    }
                }
            }
        }

        RoundedButton {
            text: "üéØ Get Started";
            clicked => {
                continue-clicked();
            }
        }
    }
}

export component SettingsScreen inherits Rectangle {
    callback api-key-changed(string);
    callback back-clicked();
    in property <string> api-key-value;
    background: Theme.background;
    VerticalBox {
        padding: 32px;
        spacing: 24px;
        HorizontalBox {
            spacing: 12px;
            RoundedButton {
                text: "‚¨ÖÔ∏è Back";
                clicked => {
                    back-clicked();
                }
            }

            Text {
                text: "‚öôÔ∏è Settings";
                font-size: 24px;
                font-weight: 600;
                color: Theme.text-primary;
                vertical-alignment: center;
            }
        }

        GroupBox {
            title: "üîß API Configuration";
            VerticalBox {
                spacing: 16px;
                Text {
                    text: "üîë OpenAI API Key";
                    font-size: 14px;
                    color: Theme.text-secondary;
                }

                RoundedLineEdit {
                    placeholder: "sk-...";
                    text: api-key-value;
                    edited => {
                        api-key-changed(self.text);
                    }
                }
            }
        }
    }
}

export component MainScreen inherits Rectangle {
    callback settings-clicked();
    callback provider-selected(string);
    callback create-leverage(string, string, string);
    callback edit-leverage(string);
    callback update-leverage(string, string, string, string);
    callback delete-leverage(string);

    in property <[Leverage]> leverages;
    in property <[Provider]> providers;
    in property <[DataStream]> data_streams;
    in-out property <string> selected_provider_id: "";
    in-out property <string> selected_data_stream_id: "";
    in-out property <string> selected_data_stream_name: "";
    in-out property <string> editing_leverage_id: "";
    in-out property <bool> is_editing: false;

    background: Theme.background;
    HorizontalBox {
        // Modern Sidebar with improved styling
        Rectangle {
            width: 280px;
            background: Theme.surface;
            border-radius: 15px;
            VerticalBox {
                padding: 20px;
                spacing: 15px;

                Text {
                    text: "üìä Your Leverages";
                    font-size: 20px;
                    font-weight: 700;
                    color: Theme.accent;
                    horizontal-alignment: center;
                }

                if leverages.length == 0: Rectangle {
                    height: 100px;
                    border-radius: 10px;
                    background: Theme.background;
                    border-width: 2px;
                    border-color: Theme.surface-hover;
                    VerticalBox {
                        alignment: center;
                        Text {
                            text: "üéØ";
                            font-size: 24px;
                            horizontal-alignment: center;
                        }

                        Text {
                            text: "No leverages yet";
                            font-size: 12px;
                            color: Theme.text-secondary;
                            horizontal-alignment: center;
                        }

                        Text {
                            text: "Create your first one!";
                            font-size: 10px;
                            color: Theme.text-secondary;
                            horizontal-alignment: center;
                        }
                    }
                }

                ScrollView {
                    VerticalBox {
                        spacing: 10px;
                        for leverage in leverages: Rectangle {
                            padding: 15px;
                            border-radius: 10px;
                            background: Theme.background;
                            border-width: 1px;
                            border-color: Theme.surface-hover;
                            animate background {
                                duration: 200ms;
                                easing: ease-in-out;
                            }

                            VerticalBox {
                                spacing: 8px;
                                HorizontalBox {
                                    Text {
                                        text: "‚ö° Leverage";
                                        font-weight: 700;
                                        color: Theme.accent;
                                        font-size: 12px;
                                    }

                                    Rectangle {
                                        // Spacer
                                    }

                                    HorizontalBox {
                                        spacing: 5px;
                                        Rectangle {
                                            width: 24px;
                                            height: 24px;
                                            border-radius: 12px;
                                            background: Theme.surface-hover;
                                            TouchArea {
                                                clicked => {
                                                    edit-leverage(leverage.id);
                                                }
                                            }

                                            Text {
                                                text: "‚úèÔ∏è";
                                                font-size: 10px;
                                                horizontal-alignment: center;
                                                vertical-alignment: center;
                                            }
                                        }

                                        Rectangle {
                                            width: 24px;
                                            height: 24px;
                                            border-radius: 12px;
                                            background: Theme.danger;
                                            TouchArea {
                                                clicked => {
                                                    delete-leverage(leverage.id);
                                                }
                                            }

                                            Text {
                                                text: "üóëÔ∏è";
                                                font-size: 10px;
                                                horizontal-alignment: center;
                                                vertical-alignment: center;
                                            }
                                        }
                                    }
                                }

                                Text {
                                    text: "üè¢ " + leverage.provider.name;
                                    color: Theme.text-secondary;
                                    font-size: 11px;
                                }

                                Text {
                                    text: "üìà " + leverage.data_stream.name;
                                    color: Theme.text-secondary;
                                    font-size: 11px;
                                }
                            }
                        }
                    }
                }
            }
        }

        // Main Content Area with improved styling
        VerticalBox {
            padding: 32px;
            spacing: 24px;
            HorizontalBox {
                spacing: 12px;
                Text {
                    text: "Gigaleverage";
                    font-size: 28px;
                    font-weight: 700;
                    color: Theme.text-primary;
                    vertical-alignment: center;
                }

                Rectangle {
                    // Spacer
                }

                RoundedButton {
                    text: "‚öôÔ∏è Settings";
                    clicked => {
                        settings-clicked();
                    }
                }
            }

            Rectangle {
                border-radius: 15px;
                background: Theme.surface;
                padding: 20px;
                VerticalBox {
                    spacing: 20px;
                    Text {
                        text: is_editing ? "‚úèÔ∏è Edit Leverage" : "‚ûï Create New Leverage";
                        font-size: 20px;
                        font-weight: 600;
                        color: Theme.text-primary;
                    }

                    Text {
                        text: "üè¢ Select a Data Provider";
                        font-weight: 600;
                        color: Theme.text-primary;
                        font-size: 16px;
                    }

                    HorizontalBox {
                        spacing: 15px;
                        for provider in providers: Rectangle {
                            border-width: 2px;
                            border-color: selected_provider_id == provider.id ? Theme.accent : Theme.surface-hover;
                            border-radius: 10px;
                            background: selected_provider_id == provider.id ? Theme.accent : Theme.surface-hover;
                            animate border-color {
                                duration: 200ms;
                                easing: ease-in-out;
                            }
                            animate background {
                                duration: 200ms;
                                easing: ease-in-out;
                            }
                            TouchArea {
                                clicked => {
                                    selected_provider_id = provider.id;
                                    provider-selected(provider.id);
                                }
                            }

                            HorizontalBox {
                                padding: 15px;
                                spacing: 10px;
                                Image {
                                    source: provider.logo;
                                    width: 40px;
                                    height: 40px;
                                    image-fit: contain;
                                }

                                Text {
                                    text: provider.name;
                                    vertical-alignment: center;
                                    color: selected_provider_id == provider.id ? Theme.background : Theme.text-primary;
                                    font-weight: 600;
                                }
                            }
                        }
                    }

                    if selected_provider_id != "": VerticalBox {
                        spacing: 15px;

                        Text {
                            text: "üìä Select Data Stream";
                            font-weight: 600;
                            color: Theme.text-primary;
                            font-size: 16px;
                        }

                        ScrollView {
                            height: 180px;
                            VerticalBox {
                                spacing: 8px;
                                for stream in data_streams: Rectangle {
                                    border-width: 1px;
                                    border-color: selected_data_stream_id == stream.id ? Theme.accent : Theme.surface-hover;
                                    border-radius: 8px;
                                    background: selected_data_stream_id == stream.id ? Theme.accent : Theme.surface-hover;
                                    animate border-color {
                                        duration: 200ms;
                                        easing: ease-in-out;
                                    }
                                    animate background {
                                        duration: 200ms;
                                        easing: ease-in-out;
                                    }
                                    TouchArea {
                                        clicked => {
                                            selected_data_stream_id = stream.id;
                                            selected_data_stream_name = stream.name;
                                        }
                                    }

                                    HorizontalBox {
                                        padding: 12px;
                                        spacing: 8px;
                                        Text {
                                            text: stream.id == "btc-price" ? "‚Çø" : stream.id == "eth-price" ? "Œû" : "üìà";
                                            font-size: 16px;
                                            vertical-alignment: center;
                                        }

                                        Text {
                                            text: stream.name;
                                            color: selected_data_stream_id == stream.id ? Theme.background : Theme.text-primary;
                                            font-weight: 500;
                                            vertical-alignment: center;
                                        }
                                    }
                                }
                            }
                        }

                        HorizontalBox {
                            spacing: 12px;
                            if is_editing: RoundedButton {
                                text: "‚ùå Cancel";
                                clicked => {
                                    is_editing = false;
                                    editing_leverage_id = "";
                                    selected_provider_id = "";
                                    selected_data_stream_id = "";
                                    selected_data_stream_name = "";
                                }
                            }
                            RoundedButton {
                                text: is_editing ? "üíæ Update Leverage" : "üöÄ Create Leverage";
                                enabled: selected_data_stream_id != "";
                                clicked => {
                                    if is_editing {
                                        update-leverage(editing_leverage_id, selected_provider_id, selected_data_stream_id, selected_data_stream_name);
                                        is_editing = false;
                                        editing_leverage_id = "";
                                    } else {
                                        create-leverage(selected_provider_id, selected_data_stream_id, selected_data_stream_name);
                                    }
                                    selected_provider_id = "";
                                    selected_data_stream_id = "";
                                    selected_data_stream_name = "";
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

export component App inherits Window {
    title: "Gigaleverage";
    background: Theme.background;
    min-width: 1000px;
    min-height: 700px;
    in-out property <Screen> current-screen: Screen.Loading;
    property <string> api-key: "";
    property <string> coingecko-api-key: "";
    in-out property <[Leverage]> leverages: [];
    in-out property <[Provider]> providers: [];
    in-out property <[DataStream]> data_streams: [];

    callback create-leverage(string, string, string);
    callback provider-selected(string);
    callback edit-leverage(string);
    callback update-leverage(string, string, string, string);
    callback delete-leverage(string);

    if current-screen == Screen.Loading: LoadingScreen { }
    if current-screen == Screen.ApiKeySetup: ApiKeyInput {
        api-keys-submitted(oa_key, cg_key) => {
            api-key = oa_key;
            coingecko-api-key = cg_key;
            current-screen = Screen.Intro;
        }
    }
    if current-screen == Screen.Intro: IntroScreen {
        continue-clicked => {
            current-screen = Screen.Main;
        }
    }
    if current-screen == Screen.Main: MainScreen {
        leverages: root.leverages;
        providers: root.providers;
        data_streams: root.data_streams;

        settings-clicked => {
            current-screen = Screen.Settings;
        }
        provider-selected(provider_id) => {
            root.provider-selected(provider_id);
        }
        create-leverage(provider_id, data_stream_id, data_stream_name) => {
            root.create-leverage(provider_id, data_stream_id, data_stream_name);
        }
        edit-leverage(leverage_id) => {
            root.edit-leverage(leverage_id);
        }
        update-leverage(leverage_id, provider_id, data_stream_id, data_stream_name) => {
            root.update-leverage(leverage_id, provider_id, data_stream_id, data_stream_name);
        }
        delete-leverage(leverage_id) => {
            root.delete-leverage(leverage_id);
        }
    }
    if current-screen == Screen.Settings: SettingsScreen {
        api-key-value: api-key;
        api-key-changed(key) => {
            api-key = key;
        }
        back-clicked => {
            current-screen = Screen.Main;
        }
    }

    // Set Plus Jakarta Sans as the default font for all text in the application
    default-font-family: "Plus Jakarta Sans";
}
